#!/usr/bin/bash

######################################################################################################################################################################################################
#
# Created on: Nov 4, 2019                Author: Prashanth Sama
#
# Outline:
# 1. Takes in a directory containing BAM files as input
# 2. Converts BAM to fastq files.
# 3. Trims these fastqs and aligns it using Bowtie2
# 4. Removes mitochondrial reads
# 5. Removes PCR duplicates.
# 6. Calls peak using MACS2
#
# Example : bash atacSeqFromBamtoPeak.sh /work/Projects/MS_GWAS_Chromatin_enrichment/main_analysis/testATAC/testBamdir/ /work/Projects/MS_GWAS_Chromatin_enrichment/main_analysis/testATAC/outFile
#
# Note: This script has little change compared to that of the same script in plato. Main changes are the paths to diff tools.
# samtools: changed from /work/Tools/samtools-1.5/samtools /work/Tools/samtools/samtools
# Picardtools: changed from /work/Tools/picard_aug6_2018/picard.jar                         /work/Tools/picard/picard.jar
######################################################################################################################################################################################################

input=$1
output=$2


Samtools="/work/Tools/samtools/samtools"
Bedtools="/work/Tools/bedtools2/bin/bedtools"
NGmerge="/work/Tools/NGmerge/NGmerge"
Fastqc="/work/Tools/FastQC/fastqc"
cutadapt="cutadapt"
adapter1="CTGTCTCTTATACACATCT"    #sequence of 1st mate adapter
adapter2="CTGTCTCTTATACACATCT"  #sequence of 2nd mate adapter
bowtie2="/work/Tools/bowtie2-2.3.5.1-sra-linux-x86_64/bowtie2"
indexFile="/work/Genomes/GRCh38_igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/Bowtie2Index/genome"
Picard="/work/Tools/picard/picard.jar"

for file in $input/*.bam 

		    do

			 echo "START: " $( date )
#extract name of the file	
name=$( echo $( basename $file) )
#Get Id
id=$( echo $name | cut -d"_" -f 1 )
echo "#################################################################Starting pipeline for:" $id "##################################################################################"

if [ ! -d $output/$id/fastq ] || [ ! -d $output/$id/Bam ] || [ ! -d $output/$id/logs ]; then
echo -e "Converting BAM to fastq :" 

mkdir -p $output/$id/fastq
mkdir -p $output/$id/Bam
mkdir -p $output/$id/logs
fi	
#Sort the bam file
echo "Sort by readname before converting BAM to Fastq for :" $id 
$Samtools sort -n $file -o $output/$id/Bam/$id"_nSorted.bam"   > $output/$id/logs/$id".sortBeforeFastq.log"

#Convert BAM to fastq
echo "Converting BAM to fastq using bedtools for :" $id 
$Bedtools bamtofastq -i $output/$id/Bam/$id"_nSorted.bam" -fq $output/$id/fastq/$id".R1.fq" -fq2 $output/$id/fastq/$id".R2.fq" >$output/$id/logs/$id".bamToFastq.log"

echo "Trim the fastqfiles generated by bedtools using NGmerge for :" $id
#Trimm the reads using NGmerge (tool developed by Harvard informatics group
$NGmerge -a -1 $output/$id/fastq/$id".R1.fq" -2 $output/$id/fastq/$id".R2.fq" -o $output/$id/fastq/$id".NgmergeTrim" -u 41

# Trim reads by cutadapt 
#$cutadapt  -a $adapter1 -A $adapter2 -o $output/$id/fastq/$id".cutadaptTrim.R1.fq" -p $output/$id/fastq/$id".cutadaptTrim.R2.fq" $output/$id/fastq/$id".R1.fq" $output/$id/fastq/$id".R2.fq"

# Fastqc for all fastq files
$Fastqc $output/$id/fastq/*.f*q $output/$id/fastq/


#Align with bowtie2 & Sort using samtools
# Align using bowtie2
echo "Aligning the fastqs using bowtie2 for: " $id
$bowtie2 --very-sensitive -k 10 -x $indexFile -1 $output/$id/fastq/$id".NgmergeTrim_1.fastq" -2 $output/$id/fastq/$id".NgmergeTrim_2.fastq" -S $output/$id/Bam/$id"_Bowtie2.sam" >$output/$id/logs/$id".alignBowtie2.log"

#Sorting
echo "Sorting the bam files from bowtie2 for: " $id
$Samtools view -b $output/$id/Bam/$id"_Bowtie2.sam" |$Samtools sort -n  -o $output/$id/Bam/$id"_Bowtie2_nSorted.bam" >$output/$id/logs/$id".sortAfterBowtie2.log"	

#Removing mitochondrial reads
echo "Removing the mitochondrial info for " $id
$Samtools view -h $output/$id/Bam/$id"_Bowtie2_nSorted.bam" | grep -v chrM | $Samtools sort -O bam -o $output/$id/Bam/$id"_Bowtie2_nSorted_rmChrM.bam" >$output/$id/logs/$id".removeChrM.log"

#Remove duplicates
echo "Mark and remove duplicates for: " $id
java -jar $Picard MarkDuplicates I=$output/$id/Bam/$id"_Bowtie2_nSorted_rmChrM.bam"  O=$output/$id/Bam/$id"_Bowtie2_nSorted_rmChrM_rmDuplicates.bam" M=$output/$id/Bam/$id".dups.txt" REMOVE_DUPLICATES=true >$output/$id/logs/$id".picardDuplicatesrm.log"

#Filtering by mapq < 10
echo "Filtering by mapping quality (MAPQ-10) for: " $id
$Samtools view -b  -q 10 $output/$id/Bam/$id"_Bowtie2_nSorted_rmChrM_rmDuplicates.bam"  -o $output/$id/Bam/$id"_Bowtie2_nSorted_rmChrM_rmDuplicates_mapq10filt.bam" >$output/$id/logs/$id".filterbyMAPQ10.log"

#Checking if directory exists
if [ ! -d $output/$id/Peaks ] ; then

mkdir -p $output/$id/Peaks

fi

#peak calling using macs
echo " Calling peaks for: " $id
macs2 callpeak -t $output/$id/Bam/$id"_Bowtie2_nSorted_rmChrM_rmDuplicates_mapq10filt.bam"  -f BAMPE -n $output/$id/Peaks/$id".peak" -g hs --keep-dup all -q 0.05 --nomodel --nolambda  >$output/$id/logs/$id".peakCalling.log"

done 
